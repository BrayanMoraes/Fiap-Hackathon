// <auto-generated />
using System;
using HealthMed.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthMed.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthMed.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATA");

                    b.Property<TimeSpan>("Horario")
                        .HasColumnType("time")
                        .HasColumnName("HORARIO");

                    b.Property<Guid>("IdMedico")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_MEDICO");

                    b.Property<decimal>("ValorConsulta")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("VALOR_CONSULTA");

                    b.HasKey("Id");

                    b.HasIndex("IdMedico");

                    b.ToTable("TB_AGENDA", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.ConsultaAgendada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool>("Aprovado")
                        .HasColumnType("bit")
                        .HasColumnName("APROVADO");

                    b.Property<bool>("Cancelada")
                        .HasColumnType("bit")
                        .HasColumnName("CANCELADA");

                    b.Property<Guid>("IdAgenda")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_AGENDA");

                    b.Property<Guid>("IdMedico")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_MEDICO");

                    b.Property<Guid>("IdPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_PACIENTE");

                    b.Property<string>("MotivoCancelamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MOTIVO_CANCELAMENTO");

                    b.HasKey("Id");

                    b.HasIndex("IdAgenda");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("TB_CONSULTA_AGENDADA", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM");

                    b.Property<Guid>("IdEspecialidade")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_ESPECIALIDADE");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SENHA");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecialidade");

                    b.ToTable("TB_MEDICO", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.MedicoEspecialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRICAO");

                    b.HasKey("Id");

                    b.ToTable("TB_MEDICO_ESPECIALIDADE", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SENHA");

                    b.HasKey("Id");

                    b.ToTable("TB_PACIENTE", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Medico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.ConsultaAgendada", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Agenda", "Agenda")
                        .WithMany("ConsultasAgendadas")
                        .HasForeignKey("IdAgenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthMed.Domain.Entities.Medico", "Medico")
                        .WithMany("ConsultasAgendadas")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthMed.Domain.Entities.Paciente", "Paciente")
                        .WithMany("ConsultasAgendadas")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.MedicoEspecialidade", "MedicoEspecialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("IdEspecialidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicoEspecialidade");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("ConsultasAgendadas");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("ConsultasAgendadas");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.MedicoEspecialidade", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("ConsultasAgendadas");
                });
#pragma warning restore 612, 618
        }
    }
}
